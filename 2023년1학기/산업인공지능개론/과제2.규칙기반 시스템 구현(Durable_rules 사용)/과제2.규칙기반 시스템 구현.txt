--------------------------------------------------------------------------------------------------------------
IF 개인정보 유출 사고가 발생한 경우
THEN 즉시 해당 사고를 신고하고, 조사를 수행한다.
IF 조사 결과 유출된 개인정보가 있을 경우
THEN 해당 개인정보에 대한 피해를 최소화하고, 피해를 입은 개인에게 적절한 보상을 제공한다.
IF 유출 원인이 기술적 결함인 경우
THEN 해당 결함을 즉시 수정하고, 유사한 사고가 발생하지 않도록 예방 조치를 취한다.
IF 유출 원인이 인적 결함인 경우
THEN 해당 인원의 교육과 인적 보안 규정을 강화하고, 유사한 사고가 발생하지 않도록 예방 조치를 취한다
위에 내용을 Durable Rules 패키지를 이용한 python 규칙기반 시스템 소스코드로 구현해주세요

from durable.lang import *

# 규칙 정의
with ruleset('personal_info_breach'):
    @when_all(m.personal_info_breach == true)
    def report_breach_and_investigate(c):
        print('즉시 해당 사고를 신고하고, 조사를 수행한다')
        # 조사 수행 로직 구현

    @when_all(m.investigation_result == 'personal_info_found')
    def minimize_damage_and_compensate(c):
        print('해당 개인정보에 대한 피해를 최소화하고, 피해를 입은 개인에게 적절한 보상을 제공한다.')
        # 피해 최소화 및 보상 로직 구현

    @when_all(m.investigation_result == 'technical_fault')
    def fix_technical_fault_and_prevent_similar_incidents(c):
        print('해당 결함을 즉시 수정하고, 유사한 사고가 발생하지 않도록 예방 조치를 취한다.')
        # 기술적 결함 수정 및 예방 조치 로직 구현

    @when_all(m.investigation_result == 'human_error')
    def strengthen_education_and_security_regulations(c):
        print('해당 인원의 교육과 인적 보안 규정을 강화하고, 유사한 사고가 발생하지 않도록 예방 조치를 취한다.')
        # 인적 결함 강화 및 예방 조치 로직 구현

post('personal_info_breach', {'personal_info_breach': true})
post('personal_info_breach', {'investigation_result': 'personal_info_found'})
post('personal_info_breach', {'investigation_result': 'technical_fault'})
post('personal_info_breach', {'investigation_result': 'human_error'})
--------------------------------------------------------------------------------------------------------------

개인정보 유출사고 대응 능력 위한 규칙기반 시스템을 "Durable Rules" 패키지를 이용하여 최대한 상세하게 python 구현해주세요

from durable.lang import *
import datetime

# 규칙 엔진 초기화
with ruleset('personal_info_security'):
    # 개인정보 유출사고 대응 규칙 정의

    # 개인정보 유출사고 발생 시간 및 처리 규칙
    @when_all(m.subject == 'personal_info_data_breach', m.action == 'occur')
    def handle_breach(c):
        print('개인정보 유출사고 발생 시간: ', datetime.datetime.now())
        print('대응 처리: 개인정보 유출사고를 즉시 보고하고, 관리자에게 통보하여 조치를 취한다.')
        print('규칙 조건 충족: ', c.m)

    # 개인정보 유출사고 발생 시점의 시간을 체크하여 처리 규칙
    @when_all(m.subject == 'personal_info_data_breach', m.action == 'check_time')
    def handle_breach_time(c):
        current_time = datetime.datetime.now()
        breach_time = datetime.datetime.strptime(c.m.time, '%Y-%m-%d %H:%M:%S')
        time_diff = current_time - breach_time

        if time_diff.total_seconds() > 3600:  # 개인정보 유출사고 발생 후 1시간 이상 경과 시
            print('시간 경과: 개인정보 유출사고 발생 후 1시간이 경과하였습니다.')
            print('대응 처리: 상황을 조사하고, 유출된 개인정보의 범위와 피해 정도를 확인하여 상황에 맞는 대응을 수행합니다.')
            print('규칙 조건 충족: ', c.m)
        else:
            print('시간 경과: 개인정보 유출사고 발생 후 1시간 미만 경과하였습니다.')
            print('규칙 조건 충족: ', c.m)

    # 개인정보 유출사고 대응 로그 남기기 규칙
    @when_all(m.subject == 'personal_info_data_breach', m.action == 'log')
    def handle_breach_log(c):
        print('로그 남기기: 개인정보 유출사고에 대한 상황과 처리 내용을 로그에 남깁니다.')
        print('규칙 조건 충족: ', c.m)


# 규칙 실행
post('personal_info_security', {'subject': 'personal_info_data_breach', 'action': 'occur'})
post('personal_info_security', {'subject': 'personal_info_data_breach', 'action': 'check_time', 'time': '2023-04-16 18:30:00'})
post('personal_info_security', {'subject': 'personal_info_data_breach', 'action': 'log'})
--------------------------------------------------------------------------------------------------------------
개인정보 유출사고 대응 능력 위한 이름,이메일,주민등록번호등의 규칙기반 시스템을 "Durable Rules" 패키지를 이용하여 최대한 상세하게 python 구현해주세요

from durable.lang import *

# 규칙 정의
with ruleset('personal_info_leakage_detection'):

    # 개인정보 유출 사고 판단 규칙
    @when_all(
        # 개인정보 유출 판단 조건 1: 개인정보가 포함된 파일이 인터넷에 업로드됨
        # 파일 유출 판단을 위해 파일 확장자를 체크
        # 예제에서는 txt, pdf, docx 확장자를 개인정보 파일로 간주
        (m.extension == 'txt' , m.extension == 'pdf' , m.extension == 'docx'),
        # 개인정보 유출 판단 조건 2: 개인정보가 포함된 파일이 네트워크를 통해 외부로 전송됨
        # 전송 판단을 위해 전송 프로토콜을 체크
        # 예제에서는 http, ftp, smtp 프로토콜을 개인정보 전송으로 간주
        (m.protocol == 'http' , m.protocol == 'ftp' , m.protocol == 'smtp'),
        # 개인정보 유출 판단 조건 3: 개인정보가 외부 IP 주소로 전송됨
        # 외부 IP 주소로의 전송 판단을 위해 도메인이나 IP 주소를 체크
        # 예제에서는 외부 도메인과 IP 주소를 개인정보 유출로 간주
        (m.destination != 'internal')
    )
    def personal_info_leakage(c):
        print('개인정보 유출 사고 발생!')
        print('파일 이름:', c.m.name)
        print('파일 확장자:', c.m.extension)
        print('전송 프로토콜:', c.m.protocol)
        print('전송 대상:', c.m.destination)
        print('파일 크기:', c.m.size, 'KB')
        print('-------------------------------')

# 사건(파일 정보)을 입력하여 규칙을 실행
post('personal_info_leakage_detection', {
    'name': 'personal_info.txt',
    'extension': 'txt',
    'protocol': 'http',
    'destination': 'external',
    'size': 1024 # 파일 크기(KB)
})
--------------------------------------------------------------------------------------------------------------
최종 과제 제출 소스 코드
개인정보 유출사고 대응 능력 위한 규칙기반 시스템을 "Durable Rules" 패키지를 이용하여  다양한 조건으로  python 구현해주세요
예시 코드를 확장하여 보다 복잡한 규칙을 구현해줘

from durable.lang import *
from datetime import datetime, timedelta

with ruleset('personal_information_rules'):
    # 개인정보 유출 이벤트 발생 시, 대응 방안 제시
    @when_all((m.event == 'personal_information_leak') & (m.severity == 'high'))
    def suggest_response(c):
        data_type = c.m.data_type
        amount = c.m.amount
        leak_location = c.m.leak_location
        time_diff = datetime.now() - datetime.strptime(c.m.time, '%Y-%m-%d %H:%M:%S')
        # 신용카드 예시
        if data_type == 'credit_card':
            if amount > 1000:
                if leak_location == 'internal':
                    print('관리자에게 경고 이메일 보내기')
                    print('사용자 계정 잠금')
                    print('--------------------------------------------------------')
                elif leak_location == 'external':
                    print('관리자에게 경고 이메일 보내기')
                    print('동결 신용 카드')
                    print('사용자 위치 외부에서 신용 카드 사용 불가')
                    print('--------------------------------------------------------')                    
            else:
                print('영향을 받는 사용자에게 경고 이메일 보내기')
                print('--------------------------------------------------------')                
        # 주민등록번호 예시
        elif data_type == 'social_security_number':
            if leak_location == 'internal':
                print('관리자에게 경고 이메일 보내기')
                print('사용자 계정 잠금')
                print('관련 기관에 보고')
                print('--------------------------------------------------------')                
            elif leak_location == 'external':
                print('영향을 받는 사용자에게 경고 이메일 보내기')
                print('신용 모니터링 서비스 제공')
                print('관련 기관에 보고')
                print('--------------------------------------------------------')
        # 유출된 시간이 1시간 이내인 경우, 추가 대응 방안 제시
        if time_diff <= timedelta(hours=1):
            if data_type == 'credit_card':
                print('1시간 이내인 경우 동결 신용 카드')
                print('--------------------------------------------------------')                
            elif data_type == 'social_security_number':
                print('1시간 이내인 경우 신용 모니터링 서비스 제공')
                print('--------------------------------------------------------')                
            else:
                print('조치 필요 없음')
                print('--------------------------------------------------------')                

# 규칙 실행
post('personal_information_rules', {'event': 'personal_information_leak', 'severity': 'high', 'data_type': 'credit_card', 'amount': 2000, 'leak_location': 'internal', 'time': '2023-04-17 15:30:00'})
post('personal_information_rules', {'event': 'personal_information_leak', 'severity': 'high', 'data_type': 'credit_card', 'amount': 500, 'leak_location': 'external', 'time': '2023-04-17 14:30:00'})
post('personal_information_rules', {'event': 'personal_information_leak', 'severity': 'high', 'data_type': 'social_security_number', 'leak_location': 'internal', 'time': '2023-04-17 15:00:00'})
post('personal_information_rules', {'event': 'personal_information_leak', 'severity': 'high', 'data_type': 'social_security_number', 'leak_location': 'external', 'time': '2023-04-17 13:00:00'})
--------------------------------------------------------------------------------------------------------------
서비스 및 소프트웨어 버전 관리 문제 대한  규칙기반 시스템을 "Durable Rules" 패키지를 이용하여  다양한 조건으로  python 구현해주세요

from durable.lang import *

# 버전 정보
version_info = {
    'service1': '1.2.3',
    'service2': '4.5.6',
    'service3': '7.8.9'
}

# 규칙 정의
with ruleset('version_rules'):
    
    # 서비스 버전이 일치하지 않는 경우
    @when_all((m.service1.version != version_info['service1']) |
              (m.service2.version != version_info['service2']) |
              (m.service3.version != version_info['service3']))
    def mismatched_version(c):
        print('서비스 버전이 일치하지 않습니다.')
        print('현재 버전: ')
        print(f"서비스 1: {m.service1.version}")
        print(f"서비스 2: {m.service2.version}")
        print(f"서비스 3: {m.service3.version}")
        
    # 서비스 버전이 일치하는 경우
    @when_all((m.service1.version == version_info['service1']) &
              (m.service2.version == version_info['service2']) &
              (m.service3.version == version_info['service3']))
    def matched_version(c):
        print('서비스 버전이 모두 일치합니다.')
        
# 규칙 실행
post('version_rules', {'service1': {'version': '1.2.3'},
                       'service2': {'version': '4.5.6'},
                       'service3': {'version': '7.8.9'}})
--------------------------------------------------------------------------------------------------------------
다양한 디바이스와 운영체제 지원 문제 대한  규칙기반 시스템을 "Durable Rules" 패키지를 이용하여  다양한 조건으로  python 구현해주세요

from durable.lang import *

# 규칙 정의
with ruleset('device_support'):
    # Windows 운영체제를 지원하는 경우
    @when_all(m.os == 'Windows')
    def support_windows(c):
        print('This device supports Windows OS')

    # MacOS 운영체제를 지원하는 경우
    @when_all(m.os == 'MacOS')
    def support_macos(c):
        print('This device supports MacOS')

    # Linux 운영체제를 지원하는 경우
    @when_all(m.os == 'Linux')
    def support_linux(c):
        print('This device supports Linux')

    # 안드로이드 운영체제를 지원하는 경우
    @when_all(m.os == 'Android')
    def support_android(c):
        print('This device supports Android OS')

    # iOS 운영체제를 지원하는 경우
    @when_all(m.os == 'iOS')
    def support_ios(c):
        print('This device supports iOS')

# 규칙 실행
post('device_support', {'os': 'Windows'})
post('device_support', {'os': 'MacOS'})
post('device_support', {'os': 'Linux'})
post('device_support', {'os': 'Android'})
post('device_support', {'os': 'iOS'})
--------------------------------------------------------------------------------------------------------------

from durable.lang import *

# 규칙 정의
with ruleset('device_event'):
    # 디바이스가 접속되었을 경우
    @when_all(m.event == 'device_connected')
    def device_connected(c):
        # 디바이스의 운영체제가 Windows인 경우
        if c.m['os'] == 'Windows':
            print('A Windows device has been connected')

            # 이벤트를 생성하여 Windows에 관한 추가 작업을 수행한다
            post('windows_event', {'event': 'device_connected', 'device_id': c.m['device_id']})

        # 디바이스의 운영체제가 MacOS인 경우
        elif c.m['os'] == 'MacOS':
            print('A MacOS device has been connected')

            # 이벤트를 생성하여 MacOS에 관한 추가 작업을 수행한다
            post('macos_event', {'event': 'device_connected', 'device_id': c.m['device_id']})

    # 디바이스가 접속이 해제되었을 경우
    @when_all(m.event == 'device_disconnected')
    def device_disconnected(c):
        # 디바이스의 운영체제가 Windows인 경우
        if c.m['os'] == 'Windows':
            print('A Windows device has been disconnected')

            # 이벤트를 생성하여 Windows에 관한 추가 작업을 수행한다
            post('windows_event', {'event': 'device_disconnected', 'device_id': c.m['device_id']})

        # 디바이스의 운영체제가 MacOS인 경우
        elif c.m['os'] == 'MacOS':
            print('A MacOS device has been disconnected')

            # 이벤트를 생성하여 MacOS에 관한 추가 작업을 수행한다
            post('macos_event', {'event': 'device_disconnected', 'device_id': c.m['device_id']})

    # Windows에 관련된 이벤트가 발생했을 경우
    @when_all(c.event == 'windows_event')
    def handle_windows_event(c):
        # 이벤트 타입이 device_connected인 경우
        if c.m['event'] == 'device_connected':
            print(f"A device with ID {c.m['device_id']} has been connected to a Windows device")

        # 이벤트 타입이 device_disconnected인 경우
        elif c.m['event'] == 'device_disconnected':
            print(f"A device with ID {c.m['device_id']} has been disconnected from a Windows device")

    # MacOS에 관련된 이벤트가 발생했을 경우
    @when_all(c.event == 'macos_event')
    def handle_macos_event(c):
        # 이벤트 타입이 device_connected인 경우
        if c.m['event'] == 'device_connected':
            print(f"A device with ID {c.m['device_id']} has been connected to a MacOS device")
        
        # 이벤트 타입이 device_disconnected인 경우
        elif c.m['event'] == 'device_disconnected':
        print(f"A device with ID {c.m['device_id']} has been disconnected from a MacOS device")

# 이벤트 발생
post('device_event', {'event': 'device_connected', 'device_id': '12345', 'os': 'Windows'})
post('device_event', {'event': 'device_disconnected', 'device_id': '12345', 'os': 'Windows'})
post('device_event', {'event': 'device_connected', 'device_id': '67890', 'os': 'MacOS'})
post('device_event', {'event': 'device_disconnected', 'device_id': '67890', 'os': 'MacOS'})